//原理:将整个数据分割成多个部分，这里是取1/2(3ep3-1)，即分割分割起始位置为1,4,13,40...
//如何在从最大的分割部分开始利用插入排序，比如本例中len=28,所以最大分割为13，那么插入排序的起始位置就从彼此之间相差13
//个长度进行插入排序那么得比较arr[13],arr[0]   arr[14],arr[1]  arr[15],arr[2] arr[16],arr[3].....
//然后h/3进行彼此间隔4个长度的比较即 arr[4],arr[0]  arr[5],arr[1]....
//因为前面进行过较大间隔的比较了，所以数据具有一定的顺序性，并且这种顺序性随排列间隔由13->4>1的递减，顺序部分越来越多
//插入排序速度越来越快，当间隔为1的排序结束，那么整个数据也就排序完成了

function sort(arr){
    var len=arr.length;
    var h=1;
    while(h<len/3){
        h=h*3+1;
    }

    while(h>=1){
        for(var i=h;i<len;i++){
            for(var j=i;j>=h;j=j-h){
                var p=j-h;
             if(arr[j]<arr[p]){
                 var t=arr[j];
                 arr[j]=arr[p];
                 arr[p]=t;
             }
            }
        }
        h=Math.floor(h/3);//结果转为正整数
    }
    return arr
}

var a=[1,2,4,5,3,34,456,44,2,4,54,11,234,5,6,54,23,2,4,3,56,5,34,223,13,4,56,3];

console.log(sort(a));

